Lab ID,Section ID,Lab Name,Section name,Section content,
CS-CNS-00003,0,Network Intrusion Detection (Snort),,"In this lab, students will explore the Snort Intrusion Detection Systems. Students will study Snort IDS, a signature-based intrusion detection system used to detect network attacks. Snort can also be used as a simple packet logger. For this lab, the students will use snort as a packet sniffer and write their own IDS rules.Ethical Claim: This lab provides students access to the public domain. The attacks deployed in this lab potentially can damage the public domain. Thus, we require each student to agree the following requirements when performing this lab:
1.Agree not to purposely deploy network attacks targeting any public domain services or computers. 2.Remove the default gw on the gateway nodes to block all traffic to the public domain. To do so, you
can issue the following command on your gateway node:
$ route -n % identify the default gateway IP address, e.g., 172.16.0.1
$ sudo route del default gw 172.16.0.1 % delete your default gw to the public domain.
By removing your default gateway, you can prevent accidentally attack external public services/nodes. You can resume the default gateway when you want to download necessary software packages from the public domain:
$ sudo route add default gw 172.16.0.1 -i ens3 % assume your default gw IP address is 172.16.0.1, and it is assigned to interface ens3.
3.The deployed attacks are resource-intensive. Thus, make sure to stop the attack once you finished the test. PLEASE do not leave or sign-off your system, letting the deployed DoS attack continuously running. This will significantly slow down the response time of the virtual lab.
",
CS-CNS-00003,1,Network Intrusion Detection (Snort),Task 1 Snort Basics and Preparation,"Snort is an open-source network intrusion detection and prevention system. It can analyze real-time traffic analysis and data flow in the network. It can check protocol analysis and can detect different types of attacks. In NIDS, snort basically checks the packet against rule written by the user. Snort rules can be written in any language; its structure is also good, and it can be easily read, and rules can also be modified. In a buffer overflow attack, snort can detect the attack by matching the previous attack pattern and then will take appropriate action to prevent the attack. In a signature-based IDS system, if the pattern matches, an attack can be easily found, but when a new attack comes, the system fails but snort overcome this limitation by analyzing real-time traffic. Whenever any packet comes into the network, then snort checks the network’s behavior. If performance degrades the network, then snort stops the packet’s processing, discards the packet, and stores its detail in the signature database.

1.1	Components of Snort
Snort is basically the combination of multiple components. All the components work together to find a par- ticular attack and then take the corresponding action required for that particular attack. Basically it consists of following major components as shown in Figure CS-CNS-00003.1:
A packet comes from the internet and enters into the packet decoder, and it goes through several phases; required action is taken by snort at every phase like if the detection engine found any miscellaneous content in the packet, then it drops that packet and in the way towards output module packet is logged in, or alert is generated. The main functions of snort components are described as follows:
Packet Decoder : is responsible for forming packets to be used by the other components. It has the job of determining which underlying protocols are used in the packet and determining the location and
 

 

Figure CS-CNS-00003.1
Components of Snort.

size of the packet data, which is then used in later components. It should be noted that the Decoder also looks for anomalies in headers (such as invalid sizes), which may then cause it to generate alerts.
Preprocessors: are used to verify anomalies specific to a service such as HTTP or FTP. Its job is ultimately to try and make it harder to fool the detection engine. Snort makes components work as plugins, and these plugin preprocessors can arrange or modify packet data. Thus, each service can have a corresponding preprocessor. Examples of using preprocessors are: decoding URI’s to address defragmenting packets, in which fragmentation of packets can be used to fool the detection engine, detecting port scanning as well as to detect anomalies in ARP packets, such as ARP spoofing, etc.
Detection Engine: has the responsibility to “detect if any intrusion activity exists in a packet”. It does this by chaining together sets of rules, specified in configuration files which include these rules, and applying them to each packet. If the packet matches a rule, that rule’s specified action is taken, or the packet is dropped. If snort performs this in real-time, depending on the network load, latency may be experienced, with worst-case scenarios resulting in packets being dropped altogether.
Logging and Alerting System: If a packet is matched to a rule, the log and or alert will be generated by the Logging and Alerting System. The message and contents generated by this component can, of course, be configured through the configuration file. If a packet triggers multiple rules, the highest alert level is what will actually be generated by this component.
Output Modules: are tasked with controlling the type of output generated, uses a plugin system giving the user flexibility, and is also highly configurable. This may include simply logging or logging to a database, sending SNMP traps, generating XML reports, or even sending alerts through UNIX sockets, allowing for (for example) dynamic modification of network configurations (Firewalls or Routers).1.2	Preparation of setting up lab environment
The first step is to check if snort is properly installed on the running VM.
$ snort --v	
If snort is installed, it may show the following output:
 

 
To check the snort running status, you can run the following command:

If it is running properly, it may show something like:

The configuration files of snort are located in the /etc/snort folder.
If the system does not contain snort, then you need to install it. Due to the variations of Linux distribution and snort versions, the installation procedure varies. A general approach is to issue:

Note that snort is built on several software packages of the Linux distribution. Usually, you may encounter the required dependencies. Snort is a libpcap-based packet sniffer/logger used as a lightweight network intrusion detection system. It features rules based logging and can perform content searching/matching in addition to detecting a variety of other attacks and probes, such as buffer overflows, stealth port scans, CGI attacks, SMB probes, and much more. Snort has a real-time alerting capability, with alerts being sent to syslog, a separate ""alert"" file, or even to a Windows computer via Samba.
During snort installation, it will ask a few set-up questions. Some of configurations are set up in the
/etc/snort/snort.debian.conf files, such as interface and home network, etc. You can manually modify the configuration file, or you can run the following command to reconfigure the setup:
",
CS-CNS-00003,2,Network Intrusion Detection (Snort),Task 2: Running Snort,"Snort is an open-source network intrusion detection and prevention system. It can analyze real-time traffic analysis and data flow in the network. It can check protocol analysis and can detect different types of attacks. In NIDS, snort basically checks the packet against rule written by the user. Snort rules can be written in any language; its structure is also good, and it can be easily read, and rules can also be modified. In a buffer overflow attack, snort can detect the attack by matching the previous attack pattern and then will take appropriate action to prevent the attack. In a signature-based IDS system, if the pattern matches, an attack can be easily found, but when a new attack comes, the system fails but snort overcome this limitation by analyzing real-time traffic. Whenever any packet comes into the network, then snort checks the network’s behavior. If performance degrades the network, then snort stops the packet’s processing, discards the packet, and stores its detail in the signature database.

1.1	Components of Snort
Snort is basically the combination of multiple components. All the components work together to find a par- ticular attack and then take the corresponding action required for that particular attack. Basically it consists of following major components as shown in Figure CS-CNS-00003.1:
A packet comes from the internet and enters into the packet decoder, and it goes through several phases; required action is taken by snort at every phase like if the detection engine found any miscellaneous content in the packet, then it drops that packet and in the way towards output module packet is logged in, or alert is generated. The main functions of snort components are described as follows:
Packet Decoder : is responsible for forming packets to be used by the other components. It has the job of determining which underlying protocols are used in the packet and determining the location and
 

 

Figure CS-CNS-00003.1
Components of Snort.

size of the packet data, which is then used in later components. It should be noted that the Decoder also looks for anomalies in headers (such as invalid sizes), which may then cause it to generate alerts.
Preprocessors: are used to verify anomalies specific to a service such as HTTP or FTP. Its job is ultimately to try and make it harder to fool the detection engine. Snort makes components work as plugins, and these plugin preprocessors can arrange or modify packet data. Thus, each service can have a corresponding preprocessor. Examples of using preprocessors are: decoding URI’s to address defragmenting packets, in which fragmentation of packets can be used to fool the detection engine, detecting port scanning as well as to detect anomalies in ARP packets, such as ARP spoofing, etc.
Detection Engine: has the responsibility to “detect if any intrusion activity exists in a packet”. It does this by chaining together sets of rules, specified in configuration files which include these rules, and applying them to each packet. If the packet matches a rule, that rule’s specified action is taken, or the packet is dropped. If snort performs this in real-time, depending on the network load, latency may be experienced, with worst-case scenarios resulting in packets being dropped altogether.
Logging and Alerting System: If a packet is matched to a rule, the log and or alert will be generated by the Logging and Alerting System. The message and contents generated by this component can, of course, be configured through the configuration file. If a packet triggers multiple rules, the highest alert level is what will actually be generated by this component.
Output Modules: are tasked with controlling the type of output generated, uses a plugin system giving the user flexibility, and is also highly configurable. This may include simply logging or logging to a database, sending SNMP traps, generating XML reports, or even sending alerts through UNIX sockets, allowing for (for example) dynamic modification of network configurations (Firewalls or Routers).1.2	Preparation of setting up lab environment
The first step is to check if snort is properly installed on the running VM.
$ snort --v	
If snort is installed, it may show the following output:
 

 
To check the snort running status, you can run the following command:

If it is running properly, it may show something like:

The configuration files of snort are located in the /etc/snort folder.
If the system does not contain snort, then you need to install it. Due to the variations of Linux distribution and snort versions, the installation procedure varies. A general approach is to issue:

Note that snort is built on several software packages of the Linux distribution. Usually, you may encounter the required dependencies. Snort is a libpcap-based packet sniffer/logger used as a lightweight network intrusion detection system. It features rules based logging and can perform content searching/matching in addition to detecting a variety of other attacks and probes, such as buffer overflows, stealth port scans, CGI attacks, SMB probes, and much more. Snort has a real-time alerting capability, with alerts being sent to syslog, a separate ""alert"" file, or even to a Windows computer via Samba.
During snort installation, it will ask a few set-up questions. Some of configurations are set up in the
/etc/snort/snort.debian.conf files, such as interface and home network, etc. You can manually modify the configuration file, or you can run the following command to reconfigure the setup:
",
CS-CNS-00003,3,Network Intrusion Detection (Snort),Task  3: Create and Test Snort Rules,"Snort is an open-source network intrusion detection and prevention system. It can analyze real-time traffic analysis and data flow in the network. It can check protocol analysis and can detect different types of attacks. In NIDS, snort basically checks the packet against rule written by the user. Snort rules can be written in any language; its structure is also good, and it can be easily read, and rules can also be modified. In a buffer overflow attack, snort can detect the attack by matching the previous attack pattern and then will take appropriate action to prevent the attack. In a signature-based IDS system, if the pattern matches, an attack can be easily found, but when a new attack comes, the system fails but snort overcome this limitation by analyzing real-time traffic. Whenever any packet comes into the network, then snort checks the network’s behavior. If performance degrades the network, then snort stops the packet’s processing, discards the packet, and stores its detail in the signature database.

1.1	Components of Snort
Snort is basically the combination of multiple components. All the components work together to find a par- ticular attack and then take the corresponding action required for that particular attack. Basically it consists of following major components as shown in Figure CS-CNS-00003.1:
A packet comes from the internet and enters into the packet decoder, and it goes through several phases; required action is taken by snort at every phase like if the detection engine found any miscellaneous content in the packet, then it drops that packet and in the way towards output module packet is logged in, or alert is generated. The main functions of snort components are described as follows:
Packet Decoder : is responsible for forming packets to be used by the other components. It has the job of determining which underlying protocols are used in the packet and determining the location and
 

 

Figure CS-CNS-00003.1
Components of Snort.

size of the packet data, which is then used in later components. It should be noted that the Decoder also looks for anomalies in headers (such as invalid sizes), which may then cause it to generate alerts.
Preprocessors: are used to verify anomalies specific to a service such as HTTP or FTP. Its job is ultimately to try and make it harder to fool the detection engine. Snort makes components work as plugins, and these plugin preprocessors can arrange or modify packet data. Thus, each service can have a corresponding preprocessor. Examples of using preprocessors are: decoding URI’s to address defragmenting packets, in which fragmentation of packets can be used to fool the detection engine, detecting port scanning as well as to detect anomalies in ARP packets, such as ARP spoofing, etc.
Detection Engine: has the responsibility to “detect if any intrusion activity exists in a packet”. It does this by chaining together sets of rules, specified in configuration files which include these rules, and applying them to each packet. If the packet matches a rule, that rule’s specified action is taken, or the packet is dropped. If snort performs this in real-time, depending on the network load, latency may be experienced, with worst-case scenarios resulting in packets being dropped altogether.
Logging and Alerting System: If a packet is matched to a rule, the log and or alert will be generated by the Logging and Alerting System. The message and contents generated by this component can, of course, be configured through the configuration file. If a packet triggers multiple rules, the highest alert level is what will actually be generated by this component.
Output Modules: are tasked with controlling the type of output generated, uses a plugin system giving the user flexibility, and is also highly configurable. This may include simply logging or logging to a database, sending SNMP traps, generating XML reports, or even sending alerts through UNIX sockets, allowing for (for example) dynamic modification of network configurations (Firewalls or Routers).1.2	Preparation of setting up lab environment
The first step is to check if snort is properly installed on the running VM.
$ snort --v	
If snort is installed, it may show the following output:
 

 
To check the snort running status, you can run the following command:

If it is running properly, it may show something like:

The configuration files of snort are located in the /etc/snort folder.
If the system does not contain snort, then you need to install it. Due to the variations of Linux distribution and snort versions, the installation procedure varies. A general approach is to issue:

Note that snort is built on several software packages of the Linux distribution. Usually, you may encounter the required dependencies. Snort is a libpcap-based packet sniffer/logger used as a lightweight network intrusion detection system. It features rules based logging and can perform content searching/matching in addition to detecting a variety of other attacks and probes, such as buffer overflows, stealth port scans, CGI attacks, SMB probes, and much more. Snort has a real-time alerting capability, with alerts being sent to syslog, a separate ""alert"" file, or even to a Windows computer via Samba.
During snort installation, it will ask a few set-up questions. Some of configurations are set up in the
/etc/snort/snort.debian.conf files, such as interface and home network, etc. You can manually modify the configuration file, or you can run the following command to reconfigure the setup:
",
CS-CNS-00003,4,Network Intrusion Detection (Snort),Task 4: Lab requirements,"Snort is an open-source network intrusion detection and prevention system. It can analyze real-time traffic analysis and data flow in the network. It can check protocol analysis and can detect different types of attacks. In NIDS, snort basically checks the packet against rule written by the user. Snort rules can be written in any language; its structure is also good, and it can be easily read, and rules can also be modified. In a buffer overflow attack, snort can detect the attack by matching the previous attack pattern and then will take appropriate action to prevent the attack. In a signature-based IDS system, if the pattern matches, an attack can be easily found, but when a new attack comes, the system fails but snort overcome this limitation by analyzing real-time traffic. Whenever any packet comes into the network, then snort checks the network’s behavior. If performance degrades the network, then snort stops the packet’s processing, discards the packet, and stores its detail in the signature database.

1.1	Components of Snort
Snort is basically the combination of multiple components. All the components work together to find a par- ticular attack and then take the corresponding action required for that particular attack. Basically it consists of following major components as shown in Figure CS-CNS-00003.1:
A packet comes from the internet and enters into the packet decoder, and it goes through several phases; required action is taken by snort at every phase like if the detection engine found any miscellaneous content in the packet, then it drops that packet and in the way towards output module packet is logged in, or alert is generated. The main functions of snort components are described as follows:
Packet Decoder : is responsible for forming packets to be used by the other components. It has the job of determining which underlying protocols are used in the packet and determining the location and
 

 

Figure CS-CNS-00003.1
Components of Snort.

size of the packet data, which is then used in later components. It should be noted that the Decoder also looks for anomalies in headers (such as invalid sizes), which may then cause it to generate alerts.
Preprocessors: are used to verify anomalies specific to a service such as HTTP or FTP. Its job is ultimately to try and make it harder to fool the detection engine. Snort makes components work as plugins, and these plugin preprocessors can arrange or modify packet data. Thus, each service can have a corresponding preprocessor. Examples of using preprocessors are: decoding URI’s to address defragmenting packets, in which fragmentation of packets can be used to fool the detection engine, detecting port scanning as well as to detect anomalies in ARP packets, such as ARP spoofing, etc.
Detection Engine: has the responsibility to “detect if any intrusion activity exists in a packet”. It does this by chaining together sets of rules, specified in configuration files which include these rules, and applying them to each packet. If the packet matches a rule, that rule’s specified action is taken, or the packet is dropped. If snort performs this in real-time, depending on the network load, latency may be experienced, with worst-case scenarios resulting in packets being dropped altogether.
Logging and Alerting System: If a packet is matched to a rule, the log and or alert will be generated by the Logging and Alerting System. The message and contents generated by this component can, of course, be configured through the configuration file. If a packet triggers multiple rules, the highest alert level is what will actually be generated by this component.
Output Modules: are tasked with controlling the type of output generated, uses a plugin system giving the user flexibility, and is also highly configurable. This may include simply logging or logging to a database, sending SNMP traps, generating XML reports, or even sending alerts through UNIX sockets, allowing for (for example) dynamic modification of network configurations (Firewalls or Routers).1.2	Preparation of setting up lab environment
The first step is to check if snort is properly installed on the running VM.
$ snort --v	
If snort is installed, it may show the following output:
 

 
To check the snort running status, you can run the following command:

If it is running properly, it may show something like:

The configuration files of snort are located in the /etc/snort folder.
If the system does not contain snort, then you need to install it. Due to the variations of Linux distribution and snort versions, the installation procedure varies. A general approach is to issue:

Note that snort is built on several software packages of the Linux distribution. Usually, you may encounter the required dependencies. Snort is a libpcap-based packet sniffer/logger used as a lightweight network intrusion detection system. It features rules based logging and can perform content searching/matching in addition to detecting a variety of other attacks and probes, such as buffer overflows, stealth port scans, CGI attacks, SMB probes, and much more. Snort has a real-time alerting capability, with alerts being sent to syslog, a separate ""alert"" file, or even to a Windows computer via Samba.
During snort installation, it will ask a few set-up questions. Some of configurations are set up in the
/etc/snort/snort.debian.conf files, such as interface and home network, etc. You can manually modify the configuration file, or you can run the following command to reconfigure the setup:
",
CS-CNS-00003,5,Network Intrusion Detection (Snort),Lab Assessments,Lab assessment for accomplishing Task 4 depends on the following facts: 1.(16 points) Successfully demonstrate the attack and detection in task 4.1. 2.(16 points) Successfully demonstrate the attack and detection in task 4.2. 3.(16 points) Successfully demonstrate the attack and detection in task 4.3. 4.(16 points) Successfully demonstrate the attack and detection in task 4.4. 5.(16 points) Successfully demonstrate the attack and detection in task 4.5. 6.(20 points) Successfully demonstrate remote logs specified in task 4.6.,
CS-CNS-00003,6,Network Intrusion Detection (Snort),Related Information and Resource,"Snort Users Manual 2.9.16:
http://manual-snort-org.s3-website-us-east-1.amazonaws.com/snort_manual.html Snort IDS Tools: http://books.gigatux.nl/mirror/snortids/0596006616/main.html
Snort Command-Line Options: http://books.gigatux.nl/mirror/snortids/0596006616/snortids-CHP-3-SECT-3.html Snort
Snort Configuration: https://www.sbarjatiya.com/notes_wiki/index.php/Snort_configuration",
